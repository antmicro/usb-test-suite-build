name: usb-tests

on:
  push:
  pull_request:

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:

          - {T: "valentyusb",  S: "test-eptri",        OP: "sim"}
          - {T: "valentyusb",  S: "test-eptri",        OP: "decode"}
          - {T: "valentyusb",  S: "test-enum",         OP: "sim"}
          - {T: "valentyusb",  S: "test-enum",         OP: "decode"}
          - {T: "valentyusb",  S: "test-w10enum",      OP: "sim"}
          - {T: "valentyusb",  S: "test-w10enum",      OP: "decode"}
          - {T: "valentyusb",  S: "test-clocks",       OP: "sim"}
          - {T: "valentyusb",  S: "test-clocks",       OP: "decode"}
          - {T: "valentyusb",  S: "test-macOSenum",    OP: "sim"}
          - {T: "valentyusb",  S: "test-macOSenum",    OP: "decode"}
          - {T: "valentyusb",  S: "test-valenty-cdc",  OP: "sim"}
          - {T: "valentyusb",  S: "test-valenty-cdc",  OP: "decode"}
          - {T: "usb1device",  S: "test-basic",        OP: "sim"}
          - {T: "usb1device",  S: "test-basic",        OP: "decode"}
          - {T: "usb1device",  S: "test-sof",          OP: "sim"}
          - {T: "usb1device",  S: "test-sof",          OP: "decode"}
          - {T: "usb1device",  S: "test-sequence",     OP: "sim"}
          - {T: "usb1device",  S: "test-sequence",     OP: "decode"}
          - {T: "usb1device",  S: "test-enum",         OP: "sim"}
          - {T: "usb1device",  S: "test-enum",         OP: "decode"}
          - {T: "usb1device",  S: "test-w10enum",      OP: "sim"}
          - {T: "usb1device",  S: "test-w10enum",      OP: "decode"}
          - {T: "usb1device",  S: "test-clocks",       OP: "sim"}
          - {T: "usb1device",  S: "test-clocks",       OP: "decode"}
          - {T: "usb1device",  S: "test-macOSenum",    OP: "sim"}
          - {T: "usb1device",  S: "test-macOSenum",    OP: "decode"}
          - {T: "foboot",      S: "test-basic",        OP: "sim"}
          - {T: "foboot",      S: "test-basic",        OP: "decode"}
          - {T: "foboot",      S: "test-sof",          OP: "sim"}
          - {T: "foboot",      S: "test-sof",          OP: "decode"}
          - {T: "foboot",      S: "test-sequence",     OP: "sim"}
          - {T: "foboot",      S: "test-sequence",     OP: "decode"}
          - {T: "foboot",      S: "test-enum",         OP: "sim"}
          - {T: "foboot",      S: "test-enum",         OP: "decode"}
          - {T: "foboot",      S: "test-w10enum",      OP: "sim"}
          - {T: "foboot",      S: "test-w10enum",      OP: "decode"}
          - {T: "foboot",      S: "test-clocks",       OP: "sim"}
          - {T: "foboot",      S: "test-clocks",       OP: "decode"}
          - {T: "foboot",      S: "test-macOSenum",    OP: "sim"}
          - {T: "foboot",      S: "test-macOSenum",    OP: "decode"}
          - {T: "tinyfpgabl",  S: "test-basic",        OP: "sim"}
          - {T: "tinyfpgabl",  S: "test-basic",        OP: "decode"}
          - {T: "tinyfpgabl",  S: "test-sof",          OP: "sim"}
          - {T: "tinyfpgabl",  S: "test-sof",          OP: "decode"}
          - {T: "tinyfpgabl",  S: "test-sequence",     OP: "sim"}
          - {T: "tinyfpgabl",  S: "test-sequence",     OP: "decode"}
          - {T: "tinyfpgabl",  S: "test-enum",         OP: "sim"}
          - {T: "tinyfpgabl",  S: "test-enum",         OP: "decode"}
          - {T: "tinyfpgabl",  S: "test-w10enum",      OP: "sim"}
          - {T: "tinyfpgabl",  S: "test-w10enum",      OP: "decode"}
          - {T: "tinyfpgabl",  S: "test-clocks",       OP: "sim"}
          - {T: "tinyfpgabl",  S: "test-clocks",       OP: "decode"}
          - {T: "tinyfpgabl",  S: "test-macOSenum",    OP: "sim"}
          - {T: "tinyfpgabl",  S: "test-macOSenum",    OP: "decode"}
          - {T: "tinyfpgabl",  S: "test-cdc",          OP: "sim"}
          - {T: "tinyfpgabl",  S: "test-cdc",          OP: "decode"}
          - {T: "tntusb",      S: "test-basic",        OP: "sim"}
          - {T: "tntusb",      S: "test-basic",        OP: "decode"}
          - {T: "tntusb",      S: "test-sof",          OP: "sim"}
          - {T: "tntusb",      S: "test-sof",          OP: "decode"}
          - {T: "tntusb",      S: "test-sequence",     OP: "sim"}
          - {T: "tntusb",      S: "test-sequence",     OP: "decode"}
          - {T: "tntusb",      S: "test-enum",         OP: "sim"}
          - {T: "tntusb",      S: "test-enum",         OP: "decode"}
          - {T: "tntusb",      S: "test-w10enum",      OP: "sim"}
          - {T: "tntusb",      S: "test-w10enum",      OP: "decode"}
          - {T: "tntusb",      S: "test-clocks",       OP: "sim"}
          - {T: "tntusb",      S: "test-clocks",       OP: "decode"}
          - {T: "tntusb",      S: "test-macOSenum",    OP: "sim"}
          - {T: "tntusb",      S: "test-macOSenum",    OP: "decode"}

    env:
      LANG: "en_US.UTF-8"
      DEBIAN_FRONTEND: "noninteractive"

    steps:
      - name: Setup repository
        uses: actions/checkout@v2

      - name: Get submodules
        run: |

          git -c submodule."foboot".update=none submodule update --init --recursive
          pip install -r conf/requirements.txt

      - name: Check format
        run: |

          flake8 usb-test-suite-testbenches/tests/*.py usb-test-suite-testbenches/wrappers/*.py \
          usb-test-suite-cocotb-usb/cocotb_usb/*.py usb-test-suite-cocotb-usb/cocotb_usb/usb/*.py

      - name: Run tests
        run: |

          wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
          bash miniconda.sh -b -p $HOME/miniconda
          source "$HOME/miniconda/etc/profile.d/conda.sh"
          hash -r
          conda config --set always_yes yes --set changeps1 no
          conda update -q conda
          conda info -a
          conda env create --file conf/environment.yml
          conda activate usb-test-suite-env
          #conda complains if it does not have the libs as well
          pip install -r conf/requirements.txt
          pip install -e usb-test-suite-cocotb-usb/
          cp litex/litex_setup.py .
          ./litex_setup.py init install --user
          pip install -e valentyusb/  # should be done after installing LiteX
          wget https://static.dev.sifive.com/dev-tools/riscv64-unknown-elf-gcc-8.1.0-2019.01.0-x86_64-linux-ubuntu14.tar.gz
          tar -xvf riscv64-unknown-elf-gcc-8.1.0-2019.01.0-x86_64-linux-ubuntu14.tar.gz
          export PATH=$PATH:$PWD/riscv64-unknown-elf-gcc-8.1.0-2019.01.0-x86_64-linux-ubuntu14/bin/
          cd usb-test-suite-testbenches
          make TARGET=$T TEST_SCRIPT=$S $OP

